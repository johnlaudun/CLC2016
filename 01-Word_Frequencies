{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# =-=-=-=-=-=-=-=-=-=-=\n",
    "# Load the CSV as a dataframe\n",
    "# =-=-=-=-=-=-=-=-=-=-= \n",
    "\n",
    "import pandas, re\n",
    "from nltk.tokenize import WhitespaceTokenizer\n",
    "\n",
    "colnames = ['Title' , 'Date', 'Author', 'Origin', 'URL', 'Text']\n",
    "df = pandas.read_csv('./clowns_2a.csv', names=colnames)\n",
    "texts = df.Text.tolist()\n",
    "\n",
    "stopwords = re.split('\\s+', open('./stopwords.txt', 'r').read().lower())\n",
    "\n",
    "def string_test(s):\n",
    "    if s is None:\n",
    "        return ''\n",
    "    else:\n",
    "        return str(s)\n",
    "\n",
    "# With any luck, this list comprehension will work:\n",
    "strings = [ string_test(text) for text in texts ]\n",
    "\n",
    "# Eliminate carriage returns\n",
    "legends = []\n",
    "for string in strings:\n",
    "    string = string.replace(u'\\xa0', u' ')\n",
    "    legends.append(string)\n",
    "\n",
    "# TOKENIZE\n",
    "tokenizer = WhitespaceTokenizer()\n",
    "tokenized = []\n",
    "for legend in legends:   \n",
    "    raw = re.sub(r\"[^\\w\\d'\\s]+\",'', legend).lower()\n",
    "    tokens = tokenizer.tokenize(raw)\n",
    "    stopped_tokens = [word for word in tokens if not word in stopwords]\n",
    "    tokenized.append(stopped_tokens)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "182"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(texts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(texts[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "lengths = []\n",
    "\n",
    "for legend in legends:\n",
    "    length = len(tokenizer.tokenize(legend))\n",
    "    lengths.append(length)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "17965\n",
      "639.1703296703297\n"
     ]
    }
   ],
   "source": [
    "print(min(lengths))\n",
    "print(max(lengths))\n",
    "print(sum(lengths)/len(lengths))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'News Report', 'Facebook', 'Fiction', 'Article', 'Social Media'}\n"
     ]
    }
   ],
   "source": [
    "origins = df.Origin.tolist()\n",
    "origin_set = set(origins)\n",
    "print(origin_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# =-=-=-=-=-=-=-=-=-=-=\n",
    "# Count Words\n",
    "# =-=-=-=-=-=-=-=-=-=-= \n",
    "\n",
    "import csv\n",
    "\n",
    "# Build a dictionary of words and their frequency in the corpus\n",
    "freq = {}\n",
    "for text in tokenized:\n",
    "    for word in text:\n",
    "        try:\n",
    "            freq[word] += 1\n",
    "        except: \n",
    "            freq[word] = 1\n",
    "\n",
    "# Convert dictionary into a list of tuples\n",
    "freq_list = [(val, key) for key, val in freq.items()]\n",
    "\n",
    "# Sort with most frequent words at top\n",
    "freq_list.sort(reverse=True)\n",
    "\n",
    "# Write to file\n",
    "# with open('./words_count.csv', 'w') as f:\n",
    "#         wtr = csv.writer(f)\n",
    "#         wtr.writerows(sorted(freq_list, reverse=True))\n",
    "#         f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10020"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(freq_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "freq_list[0:20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "outfile = open('clown_texts.txt', 'w')\n",
    "outfile.write(\"\\n\".join(legends))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import nltk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
